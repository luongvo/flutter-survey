// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_survey/test/mock/mock_data.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dio/dio.dart' as _i6;
import 'package:flutter_survey/api/exception/network_exceptions.dart' as _i5;
import 'package:flutter_survey/api/oauth_service.dart' as _i7;
import 'package:flutter_survey/api/repository/oauth_repository.dart' as _i13;
import 'package:flutter_survey/api/repository/survey_repository.dart' as _i14;
import 'package:flutter_survey/api/request/oauth_token_request.dart' as _i10;
import 'package:flutter_survey/api/response/base/base_http_response.dart'
    as _i1;
import 'package:flutter_survey/api/response/oauth_token_response.dart' as _i9;
import 'package:flutter_survey/api/response/survey_response.dart' as _i12;
import 'package:flutter_survey/api/survey_service.dart' as _i11;
import 'package:flutter_survey/models/oauth_token.dart' as _i3;
import 'package:flutter_survey/models/survey.dart' as _i15;
import 'package:flutter_survey/usecase/base/base_use_case.dart' as _i4;
import 'package:flutter_survey/usecase/login_use_case.dart' as _i16;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBaseHttpResponse_0<T extends _i1.BaseResponse> extends _i2.Fake
    implements _i1.BaseHttpResponse<T> {}

class _FakeBaseHttpResponseList_1<T extends _i1.BaseResponse> extends _i2.Fake
    implements _i1.BaseHttpResponseList<T> {}

class _FakeOAuthToken_2 extends _i2.Fake implements _i3.OAuthToken {}

class _FakeResult_3<T> extends _i2.Fake implements _i4.Result<T> {}

class _FakeNetworkExceptions_4 extends _i2.Fake
    implements _i5.NetworkExceptions {}

class _FakeRequestOptions_5 extends _i2.Fake implements _i6.RequestOptions {}

/// A class which mocks [OAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOAuthService extends _i2.Mock implements _i7.OAuthService {
  MockOAuthService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i1.BaseHttpResponse<_i9.OAuthTokenResponse>> login(
          _i10.OAuthTokenRequest? body) =>
      (super.noSuchMethod(Invocation.method(#login, [body]),
              returnValue:
                  Future<_i1.BaseHttpResponse<_i9.OAuthTokenResponse>>.value(
                      _FakeBaseHttpResponse_0<_i9.OAuthTokenResponse>()))
          as _i8.Future<_i1.BaseHttpResponse<_i9.OAuthTokenResponse>>);
}

/// A class which mocks [SurveyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveyService extends _i2.Mock implements _i11.SurveyService {
  MockSurveyService() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i1.BaseHttpResponseList<_i12.SurveyResponse>> getSurveyList(
          int? pageNumber, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(#getSurveyList, [pageNumber, pageSize]),
              returnValue:
                  Future<_i1.BaseHttpResponseList<_i12.SurveyResponse>>.value(
                      _FakeBaseHttpResponseList_1<_i12.SurveyResponse>()))
          as _i8.Future<_i1.BaseHttpResponseList<_i12.SurveyResponse>>);
}

/// A class which mocks [OAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOAuthRepository extends _i2.Mock implements _i13.OAuthRepository {
  MockOAuthRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.OAuthToken> login({String? email, String? password}) => (super
      .noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future<_i3.OAuthToken>.value(_FakeOAuthToken_2())) as _i8
      .Future<_i3.OAuthToken>);
}

/// A class which mocks [SurveyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSurveyRepository extends _i2.Mock implements _i14.SurveyRepository {
  MockSurveyRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i15.Survey>> getSurveys(int? pageNumber, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(#getSurveys, [pageNumber, pageSize]),
              returnValue: Future<List<_i15.Survey>>.value(<_i15.Survey>[]))
          as _i8.Future<List<_i15.Survey>>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i2.Mock implements _i16.LoginUseCase {
  MockLoginUseCase() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Result<void>> call(_i16.LoginInput? input) =>
      (super.noSuchMethod(Invocation.method(#call, [input]),
              returnValue:
                  Future<_i4.Result<void>>.value(_FakeResult_3<void>()))
          as _i8.Future<_i4.Result<void>>);
}

/// A class which mocks [UseCaseException].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCaseException extends _i2.Mock implements _i4.UseCaseException {
  MockUseCaseException() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i5.NetworkExceptions get networkExceptions =>
      (super.noSuchMethod(Invocation.getter(#networkExceptions),
          returnValue: _FakeNetworkExceptions_4()) as _i5.NetworkExceptions);
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i2.Mock implements _i6.DioError {
  MockDioError() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_5()) as _i6.RequestOptions);
  @override
  set requestOptions(_i6.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set response(_i6.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);
  @override
  _i6.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i6.DioErrorType.connectTimeout) as _i6.DioErrorType);
  @override
  set type(_i6.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
}
